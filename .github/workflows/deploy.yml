name: Deploy to NPM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to NPM Registry
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint
        
      - name: Run tests
        run: npm run test:ci
        
      - name: Build and validate
        run: npm run build
        
      - name: Check if version changed
        id: version-check
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if version was already published
          if npm view "@aifabrix/builder@$VERSION" version >/dev/null 2>&1; then
            echo "already_published=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION is already published, skipping deployment"
          else
            echo "already_published=false" >> $GITHUB_OUTPUT
            echo "Version $VERSION will be published"
          fi
        
      - name: Publish to NPM
        if: steps.version-check.outputs.already_published == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        if: steps.version-check.outputs.already_published == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version-check.outputs.current_version }}
          name: Release v${{ steps.version-check.outputs.current_version }}
          body: |
            Automated deployment to npm
            
            Version: ${{ steps.version-check.outputs.current_version }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

