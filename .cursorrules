# AI Fabrix Builder - Cursor Rules
# ISO 27001 Compliant Development Standards

## Security & Compliance (ISO 27001)

### Information Security Management
- All code must follow ISO 27001 information security standards
- Implement proper access controls and authentication mechanisms
- Ensure data confidentiality, integrity, and availability
- Document all security-related decisions and implementations
- Regular security reviews and vulnerability assessments required

### Data Protection
- No hardcoded secrets, passwords, or sensitive data in code
- Use environment variables and secure configuration management
- Implement proper input validation and sanitization
- Follow principle of least privilege for all operations
- Encrypt sensitive data at rest and in transit

### Audit & Compliance
- All actions must be logged and auditable
- Maintain comprehensive documentation for compliance
- Regular code reviews and security assessments
- Version control all changes with proper commit messages
- Document all dependencies and their security implications

## Code Quality Standards

### File Size Limits
- **Maximum 500 lines per file** - Split large files into smaller, focused modules
- **Maximum 50 lines per function/method** - Break down complex functions
- Use composition over inheritance to reduce complexity
- Extract reusable components and utilities

### Code Organization
- Follow single responsibility principle
- Use meaningful, descriptive names for variables and functions
- Implement proper error handling and logging
- Write self-documenting code with clear comments
- Use TypeScript for type safety where applicable

### Testing Requirements
- **ALL actions/functions MUST have corresponding tests**
- Test coverage must be at least 80% for all modules
- Write unit tests, integration tests, and end-to-end tests
- Tests must be in separate `tests/` folder mirroring code structure
- **NO tests in the main code directories** - keep tests separate
- Use Jest for testing framework
- Mock external dependencies appropriately

### Test Structure
```
tests/
├── lib/
│   ├── app.test.js
│   ├── validator.test.js
│   ├── cli.test.js
│   └── generator.test.js
├── bin/
│   └── aifabrix.test.js
└── integration/
    ├── build.test.js
    └── deploy.test.js
```

## Development Workflow

### Pre-Development
1. Analyze requirements and create detailed specifications
2. Design architecture following security best practices
3. Plan test cases before writing implementation
4. Review existing code for potential security vulnerabilities

### During Development
1. Write tests first (TDD approach)
2. Implement functionality with security in mind
3. Follow coding standards and file size limits
4. Document all security-related decisions
5. Use proper error handling and logging

### Post-Development
1. **Build project** - Ensure all dependencies are resolved
2. **Validate linting** - Run ESLint and fix all issues
3. **Run tests** - Execute full test suite and ensure 100% pass rate
4. **Security review** - Check for vulnerabilities and compliance
5. **Code review** - Peer review for quality and security

## Linting & Validation

### ESLint Configuration
- Use strict ESLint rules for security and quality
- Enforce consistent code style across the project
- Validate against security best practices
- Check for potential vulnerabilities and anti-patterns

### Build Process
- Always run `npm run build` before committing
- Ensure all dependencies are properly installed
- Validate configuration files and schemas
- Check for TypeScript errors if applicable

### Testing Process
- Run `npm test` before any commit
- Ensure all tests pass with 100% success rate
- Generate test coverage reports
- Validate test quality and completeness

## Security Best Practices

### Authentication & Authorization
- Implement proper RBAC (Role-Based Access Control)
- Use secure authentication mechanisms
- Validate all user inputs and permissions
- Implement proper session management

### Data Handling
- Sanitize all user inputs
- Use parameterized queries to prevent injection attacks
- Implement proper data validation schemas
- Encrypt sensitive data appropriately

### Infrastructure Security
- Use secure container configurations
- Implement proper network security
- Follow Docker security best practices
- Use secure base images and dependencies

## Documentation Requirements

### Code Documentation
- Document all public APIs and functions
- Include security considerations in documentation
- Provide usage examples and best practices
- Document all configuration options and their security implications

### Security Documentation
- Document all security controls and measures
- Maintain security architecture documentation
- Document incident response procedures
- Keep security policies and procedures up to date

## Quality Gates

### Mandatory Checks Before Commit
1. ✅ File size limits respected (≤500 lines, ≤50 lines per function)
2. ✅ All functions have corresponding tests
3. ✅ Tests are in `tests/` folder (not in code directories)
4. ✅ Build process completes successfully
5. ✅ Linting passes with no errors
6. ✅ All tests pass (100% success rate)
7. ✅ Security review completed
8. ✅ Documentation updated

### Continuous Integration
- Automated testing on all pull requests
- Security scanning and vulnerability assessment
- Code quality metrics and coverage reporting
- Automated deployment validation

## Error Handling & Logging

### Error Handling
- Implement comprehensive error handling
- Use structured error messages
- Log all errors with appropriate context
- Never expose sensitive information in error messages

### Logging Standards
- Use structured logging (JSON format)
- Include security-relevant events
- Implement proper log rotation and retention
- Ensure logs are tamper-evident

## Dependencies & Security

### Dependency Management
- Regularly update dependencies for security patches
- Use only trusted and well-maintained packages
- Implement dependency scanning and vulnerability assessment
- Document all dependencies and their purposes

### Security Scanning
- Regular security scans of dependencies
- Vulnerability assessment and remediation
- Security testing in CI/CD pipeline
- Regular security audits and reviews

---

**Remember**: Security is not optional. Every line of code must be written with security and compliance in mind. When in doubt, choose the more secure option and document the decision.
